Compiler 
  - for a subset of Java, based on Appel "Modern Compiler Design in Java"

Run with

	runhugs -98 Main.lhs BinaryTree.java

or with

	hugs -98 Main.lhs
	compile "BinaryTree.java"

IMPORTANT: the "-98" flag turns on a few extensions to Hugs - don't omit!

Hugs is the Haskell interpreter, and is widely available in package repos.
You can also use GHC but I've not tested it recently.

NB assumes JS in the current directory, so copy as required etc



This produces some files

 * BinaryTree.c		- resulting C code!!!

 * BinaryTree.1-lex	- lexer output
 * BinaryTree.2-tree	- parsed tree, pretty printed (ie fixed layout)
 * BinaryTree.3-table	- symbol table - info about variables and methods
 * BinaryTree.4-trans   - first basic translation, unpacking the OO details
 * BinaryTree.5-lin	- linearised nested form into simpler sequences
 * BinaryTree.6-traces	- forming basic blocks and removing some inefficient jumps


To compile the .c file, run this

	gcc -m32 rts.c BinaryTree.c

This joins the raw C code with a simple run-time system in rts.[ch] - which 
basically just provides a stack for holding fn args and local vars.

And run the executable (assuming Unix/Linux) with

	./a.out



IMPORTANT: historical code

This code was written back in the days when 32 bit pointers were a thing, so it 
assumes that ints and pointers take up the same space, and that stack cells can 
hold either. This isn't correct in the current version of GCC. 

The easiest option for now is to use the "-m32" flag on GCC to force it to use 
32 bit pointers (and you may need to install the gcc-multilib package for relevant 
headers).

The other option is to use "long int" instead of "int". You'll need to change the
C-code generation and the RTS files for this. 

